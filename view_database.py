#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö shifts.db
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python view_database.py
"""

import sqlite3
import os
from datetime import datetime

def connect_to_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "backend/shifts.db"
    if not os.path.exists(db_path):
        print(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}")
        return None
    
    try:
        conn = sqlite3.connect(db_path)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {e}")
        return None

def show_tables(conn):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    
    print("\nüìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    for table in tables:
        print(f"  - {table[0]}")
    
    return [table[0] for table in tables]

def show_table_info(conn, table_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ"""
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
    count = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = cursor.fetchall()
    
    print(f"\nüìä –¢–∞–±–ª–∏—Ü–∞ '{table_name}' ({count} –∑–∞–ø–∏—Å–µ–π):")
    print("   –ö–æ–ª–æ–Ω–∫–∏:")
    for col in columns:
        print(f"     - {col[1]} ({col[2]})")
    
    return count

def show_recent_data(conn, table_name, limit=5):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    cursor = conn.cursor()
    
    try:
        cursor.execute(f"SELECT * FROM {table_name} ORDER BY id DESC LIMIT {limit}")
        rows = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = [col[1] for col in cursor.fetchall()]
        
        if rows:
            print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {min(len(rows), limit)} –∑–∞–ø–∏—Å–µ–π –∏–∑ '{table_name}':")
            for i, row in enumerate(rows, 1):
                print(f"\n   –ó–∞–ø–∏—Å—å {i}:")
                for j, value in enumerate(row):
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    if isinstance(value, str) and len(value) > 50:
                        value = value[:50] + "..."
                    print(f"     {columns[j]}: {value}")
        else:
            print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –ø—É—Å—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")

def get_database_size():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "backend/shifts.db"
    if os.path.exists(db_path):
        size = os.path.getsize(db_path)
        if size < 1024:
            return f"{size} –±–∞–π—Ç"
        elif size < 1024*1024:
            return f"{size/1024:.1f} –ö–ë"
        else:
            return f"{size/(1024*1024):.1f} –ú–ë"
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def main():
    print("üóÑÔ∏è  –ü–†–û–°–ú–û–¢–† –ë–ê–ó–´ –î–ê–ù–ù–´–• –°–ò–°–¢–ï–ú–´ –ü–ï–†–ï–î–ê–ß –°–ú–ï–ù")
    print("=" * 50)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    db_size = get_database_size()
    print(f"üìÅ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_size}")
    print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    conn = connect_to_db()
    if not conn:
        return
    
    try:
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = show_tables(conn)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        for table in tables:
            count = show_table_info(conn, table)
            if count > 0:
                show_recent_data(conn, table)
        
        print("\n" + "=" * 50)
        print("‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüí° –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–≠–∫—Å–ø–æ—Ä—Ç' –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—á–∏—Å—Ç–∏—Ç—å' –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
        
    finally:
        conn.close()

if __name__ == "__main__":
    main()
